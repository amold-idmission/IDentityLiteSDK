// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name IDentityLiteSDK
import AVFoundation
import Accelerate
import CoreGraphics
import CoreMedia
import Foundation
import GZIP
@_exported import IDentityLiteSDK
import MLKitFaceDetection
import MLKitVision
import MetalPerformanceShaders
import Swift
import TensorFlowLite
import UIKit
import _Concurrency
public struct CustomerVerifyDataResponse : Swift.Codable {
  public var extractedPersonalData: IDentityLiteSDK.PersonalCustomerVerifyResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FormDetailValidateIdResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerEnrollDataResponse : Swift.Codable {
  public var extractedIdData: IDentityLiteSDK.IdDataResponse?
  public var extractedPersonalData: IDentityLiteSDK.PersonalCustomerEnrollResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct SignatureData : Swift.Encodable {
  public var signatureImage: Swift.String?
  public init(signatureImage: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdditionalCustomerEnrollBiometricRequestData : Swift.Encodable {
  public enum NeedImmediateResponse : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DeDuplicationRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var uniqueRequestId: Swift.String
  public var needImmediateResponse: IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.NeedImmediateResponse?
  public var deDuplicationRequired: IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.DeDuplicationRequired?
  public var metadata: IDentityLiteSDK.Metadata?
  public var ocrMetadata: IDentityLiteSDK.OcrMetadata?
  public init(uniqueRequestId: Swift.String = UUID().uuidString, needImmediateResponse: IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.NeedImmediateResponse? = nil, deDuplicationRequired: IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.DeDuplicationRequired? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
extension Swift.Dictionary {
  public static func += (lhs: inout Swift.Dictionary<Key, Value>, rhs: Swift.Dictionary<Key, Value>)
}
public struct BiometricVerifyRequestData : Swift.Encodable {
  public var selfie: Swift.String
  public var fingerPrintData: IDentityLiteSDK.FingerPrintData?
  public var voiceData: Swift.String?
  public init(selfie: Swift.String, fingerPrintData: IDentityLiteSDK.FingerPrintData? = nil, voiceData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdditionalCustomerWFlagCommonData : Swift.Encodable {
  public enum ManualReviewRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    case forced
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum BypassAgeValidation : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DeDuplicationRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum BypassNameMatching : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum PostDataAPIRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SendInputImagesInPost : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum SendProcessedImagesInPost : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum NeedImmediateResponse : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum DeduplicationSynchronous : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum VerifyDataWithHost : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum IdBackImageRequired : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public enum StripSpecialCharacters : Swift.String, Swift.Encodable {
    case yes
    case no
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var uniqueRequestId: Swift.String
  public var manualReviewRequired: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.ManualReviewRequired?
  public var bypassAgeValidation: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassAgeValidation?
  public var deDuplicationRequired: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeDuplicationRequired?
  public var bypassNameMatching: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassNameMatching?
  public var postDataAPIRequired: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.PostDataAPIRequired?
  public var sendInputImagesInPost: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendInputImagesInPost?
  public var sendProcessedImagesInPost: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendProcessedImagesInPost?
  public var needImmediateResponse: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.NeedImmediateResponse?
  public var deduplicationSynchronous: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeduplicationSynchronous?
  public var verifyDataWithHost: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.VerifyDataWithHost?
  public var idBackImageRequired: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.IdBackImageRequired?
  public var stripSpecialCharacters: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.StripSpecialCharacters?
  public var metadata: IDentityLiteSDK.Metadata?
  public var ocrMetadata: IDentityLiteSDK.OcrMetadata?
  public init(uniqueRequestId: Swift.String = UUID().uuidString, manualReviewRequired: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.ManualReviewRequired? = .no, bypassAgeValidation: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassAgeValidation? = .no, deDuplicationRequired: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeDuplicationRequired? = .no, bypassNameMatching: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassNameMatching? = .yes, postDataAPIRequired: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.PostDataAPIRequired? = .no, sendInputImagesInPost: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendInputImagesInPost? = .no, sendProcessedImagesInPost: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendProcessedImagesInPost? = .no, needImmediateResponse: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.NeedImmediateResponse? = .no, deduplicationSynchronous: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeduplicationSynchronous? = .no, verifyDataWithHost: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.VerifyDataWithHost? = .no, idBackImageRequired: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.IdBackImageRequired? = .yes, stripSpecialCharacters: IDentityLiteSDK.AdditionalCustomerWFlagCommonData.StripSpecialCharacters? = .yes)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdFaceMatchDataRequest : Swift.Encodable {
  public var idData: IDentityLiteSDK.IdDataRequest
  public var personalData: IDentityLiteSDK.PersonalCustomerCommonRequestData1?
  public var biometericData: IDentityLiteSDK.BiometricValidateIdFaceMatchData
  public init(idData: IDentityLiteSDK.IdDataRequest, personalData: IDentityLiteSDK.PersonalCustomerCommonRequestData1? = nil, biometericData: IDentityLiteSDK.BiometricValidateIdFaceMatchData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PersonalCustomerCommonRequestData : Swift.Encodable {
  public enum Gender : Swift.String, Swift.Encodable {
    case female
    case male
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var uniqueNumber: Swift.String
  public var name: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: IDentityLiteSDK.PersonalCustomerCommonRequestData.Gender?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var district: Swift.String?
  public var country: Swift.String?
  public init(uniqueNumber: Swift.String, name: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, dob: Swift.String? = nil, gender: IDentityLiteSDK.PersonalCustomerCommonRequestData.Gender? = nil, addressLine1: Swift.String? = nil, addressLine2: Swift.String? = nil, city: Swift.String? = nil, district: Swift.String? = nil, country: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdDataRequest : Swift.Encodable {
  public var idData: IDentityLiteSDK.IdDataRequest
  public var personalData: IDentityLiteSDK.PersonalCustomerCommonRequestData1?
  public init(idData: IDentityLiteSDK.IdDataRequest, personalData: IDentityLiteSDK.PersonalCustomerCommonRequestData1? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BiometricEnrollBiometricRequestData : Swift.Encodable {
  public var selfie: Swift.String?
  public var fingerPrintData: IDentityLiteSDK.FingerPrintData?
  public var voiceData: Swift.String?
  public init(selfie: Swift.String? = nil, fingerPrintData: IDentityLiteSDK.FingerPrintData? = nil, voiceData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct StatusData : Swift.Codable {
  public var statusCode: Swift.String?
  public var statusMessage: Swift.String?
  public var errorData: Swift.String?
  public var requestId: Swift.Int?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct Metadata : Swift.Encodable {
  public struct DetectedRect : Swift.Encodable {
    public var right: Swift.Float
    public var top: Swift.Float
    public var left: Swift.Float
    public var bottom: Swift.Float
    public init(detectedFrame: CoreGraphics.CGRect, fullImageSize: CoreGraphics.CGSize)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Front : Swift.Encodable {
    public var operationTime: Swift.Int
    public var captureTime: Swift.Int
    public var avg_score: Swift.Float?
    public var detectedRect: IDentityLiteSDK.Metadata.DetectedRect
    public init(operationTime: Swift.Int, captureTime: Swift.Int, avgRealness: Swift.Float?, detectedRect: IDentityLiteSDK.Metadata.DetectedRect)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Back : Swift.Encodable {
    public var operationTime: Swift.Int
    public var captureTime: Swift.Int
    public var avg_score: Swift.Float?
    public var detectedRect: IDentityLiteSDK.Metadata.DetectedRect
    public init(operationTime: Swift.Int, captureTime: Swift.Int, avgRealness: Swift.Float?, detectedRect: IDentityLiteSDK.Metadata.DetectedRect)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public struct Selfie : Swift.Encodable {
    public var avg_score: Swift.Float
    public var operationTime: Swift.Int
    public var captureTime: Swift.Int
    public var detectedRect: IDentityLiteSDK.Metadata.DetectedRect
    public init(avgLiveness: Swift.Float, operationTime: Swift.Int, captureTime: Swift.Int, detectedRect: IDentityLiteSDK.Metadata.DetectedRect)
    public func encode(to encoder: Swift.Encoder) throws
  }
  public var front: [IDentityLiteSDK.Metadata.Front]?
  public var back: [IDentityLiteSDK.Metadata.Back]?
  public var selfie: [IDentityLiteSDK.Metadata.Selfie]?
  public init(front: [IDentityLiteSDK.Metadata.Front]? = nil, back: [IDentityLiteSDK.Metadata.Back]? = nil, selfie: [IDentityLiteSDK.Metadata.Selfie]? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdFaceMatchDataResponse : Swift.Codable {
  public var extractedIdData: IDentityLiteSDK.IdDataResponse?
  public var extractedPersonalData: IDentityLiteSDK.PersonalCustomerValidateIdFaceMatchResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public protocol IDCaptureDelegate : AnyObject {
  func updated(state: IDentityLiteSDK.IDCaptureState)
}
public enum IDCaptureState {
  case detectingBox
  case moveCloser
  case moveAway
  case alignRectangle
  case detectedBox(IDentityLiteSDK.DetectedData)
  case classifiedDocument(IDentityLiteSDK.DetectedData)
  case success(IDentityLiteSDK.DetectedData)
  case timedOut(IDentityLiteSDK.DetectedData)
  case failed(IDentityLiteSDK.DetectedData)
}
public struct DebugData {
  public var documentLocation: CoreGraphics.CGRect
  public var fullSize: CoreGraphics.CGSize?
  public var faceLocation: CoreGraphics.CGRect?
  public var realnessScores: IDentityLiteSDK.RealnessScores?
  public var topClassifierResults: [(Swift.String, Swift.Float)]?
}
public struct DetectedData {
  public enum DocumentSide {
    case front
    case back
    public static func == (a: IDentityLiteSDK.DetectedData.DocumentSide, b: IDentityLiteSDK.DetectedData.DocumentSide) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var documentLocation: CoreGraphics.CGRect
  public var faceLocation: CoreGraphics.CGRect?
  public var fullImageSize: CoreGraphics.CGSize
  public var type: Swift.String?
  public var sides: Swift.Int
  public var side: IDentityLiteSDK.DetectedData.DocumentSide?
  public var shouldHavePhoto: Swift.Bool
  public var shouldHaveMrz: Swift.Bool
  public var shouldHaveBarcode: Swift.Bool {
    get
  }
  public var isReal: Swift.Bool?
  public var realness: Swift.Float?
  public var isPhotoPresent: Swift.Bool
  public var mrz: IDentityLiteSDK.MRZResult?
  public var barcode: [Swift.String : Swift.String]?
  public var idType: Swift.String?
  public var country: Swift.String?
  public var state: Swift.String?
  public var barcodeType: Swift.String?
  public var image: UIKit.UIImage?
  public var faceImage: UIKit.UIImage?
}
public struct SelectedData {
  public var idType: Swift.String
  public var country: Swift.String
  public var state: Swift.String?
  public init(idType: Swift.String, country: Swift.String, state: Swift.String? = nil)
}
public class IDCapture {
  public var captureBack: Swift.Bool?
  public var idType: Swift.String?
  public var idCountry: Swift.String?
  public var idState: Swift.String?
  public static var frontRealnessThreshold: Swift.Float
  public static var backRealnessThreshold: Swift.Float
  public static var frontDocumentConfidence: Swift.Float
  public static var backDocumentConfidence: Swift.Float
  public static var lowerWidthThresholdTolerance: Swift.Float
  public static var upperWidthThresholdTolerance: Swift.Float
  public static var isDebugMode: Swift.Bool
  public static var capture4K: Swift.Bool
  public static var retryScreenText: Swift.String?
  public static var retryScreenImageTintColor: UIKit.UIColor?
  public static var retryScreenButtonTintColor: UIKit.UIColor?
  weak public var delegate: IDentityLiteSDK.IDCaptureDelegate?
  public init(overlayFrame: CoreGraphics.CGRect)
  public func typeMismatch()
  public func retry()
  @objc deinit
}
extension IDentityLiteSDK.IDCapture : IDentityLiteSDK.CaptureSessionDelegate {
  public func captured(image: UIKit.UIImage, captureMode: IDentityLiteSDK.CaptureMode, lensPosition: Swift.Float)
}
extension Foundation.NSNotification.Name {
  public static let idCaptureDebugData: Foundation.Notification.Name
  public static let idCaptureMode: Foundation.Notification.Name
}
public struct AdditionalCustomerCommonData : Swift.Encodable {
  public var uniqueRequestId: Swift.String
  public var metadata: IDentityLiteSDK.Metadata?
  public var ocrMetadata: IDentityLiteSDK.OcrMetadata?
  public init(uniqueRequestId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerIdentifyDataResponse : Swift.Codable {
  public var extractedPersonalData: IDentityLiteSDK.PersonalCustomerIdentifyResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FormDetailVerifyResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerVerifyDataRequest : Swift.Encodable {
  public var personalData: IDentityLiteSDK.PersonalCustomerVerifyData
  public var biometericData: IDentityLiteSDK.BiometricVerifyRequestData
  public init(personalData: IDentityLiteSDK.PersonalCustomerVerifyData, biometricData: IDentityLiteSDK.BiometricVerifyRequestData)
  public func encode(to encoder: Swift.Encoder) throws
}
public enum CameraPosition {
  case back, front
  public static func == (a: IDentityLiteSDK.CameraPosition, b: IDentityLiteSDK.CameraPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CaptureSessionViewController : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public let captureSession: IDentityLiteSDK.CaptureSession
  @_Concurrency.MainActor(unsafe) public static let greenColor: UIKit.UIColor
  @_Concurrency.MainActor(unsafe) open var cameraPosition: IDentityLiteSDK.CameraPosition {
    get
  }
  @_Concurrency.MainActor(unsafe) public var videoPreviewLayer: AVFoundation.AVCaptureVideoPreviewLayer? {
    get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func captureSessionDidStartRunning()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct PersonalCustomerVerifyResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var address: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var addressLine3: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var phone: Swift.String?
  public var district: Swift.String?
  public var enrolledDate: Swift.String?
  public var enrolledFaceImage: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonalCustomerIdentifyResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var address: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var addressLine3: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var phone: Swift.String?
  public var district: Swift.String?
  public var fingerprintUsedForVerification: Swift.String?
  public var enrolledDate: Swift.String?
  public var enrolledFaceImage: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FormDetailEnrollBiometricsResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerEnrollBiometricsRequest : Swift.Encodable {
  public var securityData: IDentityLiteSDK.SecurityData
  public var customerData: IDentityLiteSDK.CustomerEnrollBiometricDataRequest
  public var additionalData: IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData
  public init(securityData: IDentityLiteSDK.SecurityData, customerData: IDentityLiteSDK.CustomerEnrollBiometricDataRequest, additionalData: IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerEnrollRequest : Swift.Encodable {
  public var securityData: IDentityLiteSDK.SecurityData
  public var customerData: IDentityLiteSDK.CustomerEnrollDataRequest
  public var additionalData: IDentityLiteSDK.AdditionalCustomerWFlagCommonData
  public var signature: IDentityLiteSDK.SignatureData?
  public var employee: IDentityLiteSDK.EmployeeData?
  public init(securityData: IDentityLiteSDK.SecurityData, customerData: IDentityLiteSDK.CustomerEnrollDataRequest, additionalData: IDentityLiteSDK.AdditionalCustomerWFlagCommonData, signature: IDentityLiteSDK.SignatureData? = nil, employee: IDentityLiteSDK.EmployeeData? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias HostdataResponse = [Swift.String : Any]
public typealias ValidateIdAPICompletion = (_ result: Swift.Result<IDentityLiteSDK.CustomerValidateIdResponse, Swift.Error>, _ hostData: IDentityLiteSDK.HostdataResponse?) -> Swift.Void
public typealias LiveFaceCheckAPICompletion = (_ result: Swift.Result<IDentityLiteSDK.CustomerLiveCheckResponse, Swift.Error>) -> Swift.Void
public typealias ValidateIdMatchFaceAPICompletion = (_ result: Swift.Result<IDentityLiteSDK.CustomerValidateIdFaceMatchResponse, Swift.Error>, _ hostData: IDentityLiteSDK.HostdataResponse?) -> Swift.Void
public typealias ValidateIdCustomerEnrollAPICompletion = (_ result: Swift.Result<IDentityLiteSDK.CustomerEnrollResponse, Swift.Error>, _ hostData: IDentityLiteSDK.HostdataResponse?) -> Swift.Void
public typealias CustomerEnrollBiometricsAPICompletion = (_ result: Swift.Result<IDentityLiteSDK.CustomerEnrollBiometricResponse, Swift.Error>) -> Swift.Void
public typealias CustomerVerificationAPICompletion = (_ result: Swift.Result<IDentityLiteSDK.CustomerVerifyResponse, Swift.Error>) -> Swift.Void
public typealias CustomerIdentifyAPICompletion = (_ result: Swift.Result<IDentityLiteSDK.CustomerIdentifyResponse, Swift.Error>) -> Swift.Void
extension IDentityLiteSDK.IDentitySDK {
  public class func post(validateId request: IDentityLiteSDK.CustomerValidateIdRequest, completion: @escaping IDentityLiteSDK.ValidateIdAPICompletion)
  public class func post(liveFaceCheck request: IDentityLiteSDK.CustomerLiveCheckRequest, completion: @escaping IDentityLiteSDK.LiveFaceCheckAPICompletion)
  public class func post(validateIdMatchFace request: IDentityLiteSDK.CustomerValidateIdFaceMatchRequest, completion: @escaping IDentityLiteSDK.ValidateIdMatchFaceAPICompletion)
  public class func post(enroll request: IDentityLiteSDK.CustomerEnrollRequest, completion: @escaping IDentityLiteSDK.ValidateIdCustomerEnrollAPICompletion)
  public class func post(enrollBiometrics request: IDentityLiteSDK.CustomerEnrollBiometricsRequest, completion: @escaping IDentityLiteSDK.CustomerEnrollBiometricsAPICompletion)
  public class func post(verify request: IDentityLiteSDK.CustomerVerifyRequest, completion: @escaping IDentityLiteSDK.CustomerVerificationAPICompletion)
  public class func post(identify request: IDentityLiteSDK.CustomerIdentifyRequest, completion: @escaping IDentityLiteSDK.CustomerIdentifyAPICompletion)
}
public struct FingerPrint : Swift.Encodable {
  public enum Position : Swift.String, Swift.Encodable {
    case rightIndexFinger
    case rightMiddleFinger
    case rightRingFinger
    case rightLittleFinger
    case rightThumb
    case leftIndexFinger
    case leftMiddleFinger
    case leftRingFinger
    case leftLittleFinger
    case leftThumb
    case leftFourFingers
    case rightFourFingers
    case twoThumbs
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var fpData: Swift.String
  public var fpPosition: IDentityLiteSDK.FingerPrint.Position
  public var imageHashValue: Swift.String?
  public var nfiq: Swift.String?
  public init(fpData: Swift.String, fpPosition: IDentityLiteSDK.FingerPrint.Position, imageHashValue: Swift.String? = nil, nfiq: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerEnrollBiometricDataRequest : Swift.Encodable {
  public var personalData: IDentityLiteSDK.PersonalCustomerCommonRequestData
  public var biometericData: IDentityLiteSDK.BiometricEnrollBiometricRequestData
  public init(personalData: IDentityLiteSDK.PersonalCustomerCommonRequestData, biometricData: IDentityLiteSDK.BiometricEnrollBiometricRequestData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct BiometricLiveCheckData : Swift.Encodable {
  public var selfie: Swift.String
  public init(selfie: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias BoolCompletion = (Swift.Bool) -> Swift.Void
public protocol CaptureSessionDelegate : AnyObject {
  func captured(image: UIKit.UIImage, captureMode: IDentityLiteSDK.CaptureMode, lensPosition: Swift.Float)
}
public enum CaptureMode {
  case standard, high, barcode
  public static func == (a: IDentityLiteSDK.CaptureMode, b: IDentityLiteSDK.CaptureMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class CaptureSession : ObjectiveC.NSObject {
  weak public var delegate: IDentityLiteSDK.CaptureSessionDelegate?
  public var cameraPosition: AVFoundation.AVCaptureDevice.Position
  public var captureMode: IDentityLiteSDK.CaptureMode {
    get
    set
  }
  @objc override dynamic public init()
  @objc deinit
}
extension IDentityLiteSDK.CaptureSession : AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension IDentityLiteSDK.CaptureSession {
  public func authorizationStatus(completion: @escaping IDentityLiteSDK.BoolCompletion)
}
@_hasMissingDesignatedInitializers public class SearchCompanyTemplateDetails {
  convenience public init?()
  public func templateCode(idType: Swift.String, idCountry: Swift.String, idState: Swift.String?) -> Swift.String?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class XMLHashOptions {
  public var shouldProcessLazily: Swift.Bool
  public var shouldProcessNamespaces: Swift.Bool
  public var caseInsensitive: Swift.Bool
  public var encoding: Swift.String.Encoding
  public var userInfo: [Swift.CodingUserInfoKey : Any]
  public var detectParsingErrors: Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class XMLHash {
  public class func config(_ configAction: (IDentityLiteSDK.XMLHashOptions) -> Swift.Void) -> IDentityLiteSDK.XMLHash
  public func parse(_ xml: Swift.String) -> IDentityLiteSDK.XMLIndexer
  public func parse(_ data: Foundation.Data) -> IDentityLiteSDK.XMLIndexer
  public class func parse(_ xml: Swift.String) -> IDentityLiteSDK.XMLIndexer
  public class func parse(_ data: Foundation.Data) -> IDentityLiteSDK.XMLIndexer
  public class func lazy(_ xml: Swift.String) -> IDentityLiteSDK.XMLIndexer
  public class func lazy(_ data: Foundation.Data) -> IDentityLiteSDK.XMLIndexer
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IndexOp {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IndexOps {
  @objc deinit
}
public struct ParsingError : Swift.Error {
  public let line: Swift.Int
  public let column: Swift.Int
}
public enum IndexingError : Swift.Error {
  case attribute(attr: Swift.String)
  case attributeValue(attr: Swift.String, value: Swift.String)
  case key(key: Swift.String)
  case index(idx: Swift.Int)
  case initialize(instance: Swift.AnyObject)
  case encoding
  case error
  @available(*, unavailable, renamed: "attribute(attr:)")
  public static func Attribute(attr: Swift.String) -> IDentityLiteSDK.IndexingError
  @available(*, unavailable, renamed: "attributeValue(attr:value:)")
  public static func AttributeValue(attr: Swift.String, value: Swift.String) -> IDentityLiteSDK.IndexingError
  @available(*, unavailable, renamed: "key(key:)")
  public static func Key(key: Swift.String) -> IDentityLiteSDK.IndexingError
  @available(*, unavailable, renamed: "index(idx:)")
  public static func Index(idx: Swift.Int) -> IDentityLiteSDK.IndexingError
  @available(*, unavailable, renamed: "initialize(instance:)")
  public static func Init(instance: Swift.AnyObject) -> IDentityLiteSDK.IndexingError
  @available(*, unavailable, renamed: "error")
  public static var Error: IDentityLiteSDK.IndexingError {
    get
  }
}
public enum XMLIndexer {
  case element(IDentityLiteSDK.XMLElement)
  case list([IDentityLiteSDK.XMLElement])
  case stream(IDentityLiteSDK.IndexOps)
  case xmlError(IDentityLiteSDK.IndexingError)
  case parsingError(IDentityLiteSDK.ParsingError)
  @available(*, unavailable, renamed: "element(_:)")
  public static func Element(_: IDentityLiteSDK.XMLElement) -> IDentityLiteSDK.XMLIndexer
  @available(*, unavailable, renamed: "list(_:)")
  public static func List(_: [IDentityLiteSDK.XMLElement]) -> IDentityLiteSDK.XMLIndexer
  @available(*, unavailable, renamed: "stream(_:)")
  public static func Stream(_: IDentityLiteSDK.IndexOps) -> IDentityLiteSDK.XMLIndexer
  @available(*, unavailable, renamed: "xmlError(_:)")
  public static func XMLError(_: IDentityLiteSDK.IndexingError) -> IDentityLiteSDK.XMLIndexer
  @available(*, unavailable, renamed: "withAttribute(_:_:)")
  public static func withAttr(_ attr: Swift.String, _ value: Swift.String) throws -> IDentityLiteSDK.XMLIndexer
  public var element: IDentityLiteSDK.XMLElement? {
    get
  }
  public var all: [IDentityLiteSDK.XMLIndexer] {
    get
  }
  public var children: [IDentityLiteSDK.XMLIndexer] {
    get
  }
  @available(*, unavailable, renamed: "filterChildren(_:)")
  public func filter(_ included: (_ elem: IDentityLiteSDK.XMLElement, _ index: Swift.Int) -> Swift.Bool) -> IDentityLiteSDK.XMLIndexer
  public func filterChildren(_ included: (_ elem: IDentityLiteSDK.XMLElement, _ index: Swift.Int) -> Swift.Bool) -> IDentityLiteSDK.XMLIndexer
  public func filterAll(_ included: (_ elem: IDentityLiteSDK.XMLElement, _ index: Swift.Int) -> Swift.Bool) -> IDentityLiteSDK.XMLIndexer
  public var userInfo: [Swift.CodingUserInfoKey : Any] {
    get
  }
  public func withAttribute(_ attr: Swift.String, _ value: Swift.String) throws -> IDentityLiteSDK.XMLIndexer
  public init(_ rawObject: Swift.AnyObject) throws
  public init(_ elem: IDentityLiteSDK.XMLElement)
  public func byKey(_ key: Swift.String) throws -> IDentityLiteSDK.XMLIndexer
  public subscript(key: Swift.String) -> IDentityLiteSDK.XMLIndexer {
    get
  }
  public func byIndex(_ index: Swift.Int) throws -> IDentityLiteSDK.XMLIndexer
  public subscript(index: Swift.Int) -> IDentityLiteSDK.XMLIndexer {
    get
  }
}
extension IDentityLiteSDK.XMLIndexer : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IDentityLiteSDK.IndexingError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public protocol XMLContent : Swift.CustomStringConvertible {
}
@_hasMissingDesignatedInitializers public class TextElement : IDentityLiteSDK.XMLContent {
  final public let text: Swift.String
  @objc deinit
}
public struct XMLAttribute {
  public let name: Swift.String
  public let text: Swift.String
}
@_hasMissingDesignatedInitializers public class XMLElement : IDentityLiteSDK.XMLContent {
  final public let name: Swift.String
  public var caseInsensitive: Swift.Bool {
    get
  }
  public var allAttributes: [Swift.String : IDentityLiteSDK.XMLAttribute]
  public func attribute(by name: Swift.String) -> IDentityLiteSDK.XMLAttribute?
  public var text: Swift.String {
    get
  }
  public var recursiveText: Swift.String {
    get
  }
  public var innerXML: Swift.String {
    get
  }
  public var children: [IDentityLiteSDK.XMLContent]
  @objc deinit
}
extension IDentityLiteSDK.TextElement : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IDentityLiteSDK.XMLAttribute : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IDentityLiteSDK.XMLElement : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension IDentityLiteSDK.XMLHash {
  public typealias XMLElement = IDentityLiteSDK.XMLHashXMLElement
}
public typealias XMLHashXMLElement = IDentityLiteSDK.XMLElement
extension IDentityLiteSDK.XMLIndexer {
  public func withAttribute<A, V>(_ attr: A, _ value: V) throws -> IDentityLiteSDK.XMLIndexer where A : Swift.RawRepresentable, V : Swift.RawRepresentable, A.RawValue == Swift.String, V.RawValue == Swift.String
  public func byKey<K>(_ key: K) throws -> IDentityLiteSDK.XMLIndexer where K : Swift.RawRepresentable, K.RawValue == Swift.String
  public subscript<K>(key: K) -> IDentityLiteSDK.XMLIndexer where K : Swift.RawRepresentable, K.RawValue == Swift.String {
    get
  }
}
extension IDentityLiteSDK.XMLElement {
  public func attribute<N>(by name: N) -> IDentityLiteSDK.XMLAttribute? where N : Swift.RawRepresentable, N.RawValue == Swift.String
}
public struct CustomerDataValidateIdResponse : Swift.Codable {
  public var extractedIdData: IDentityLiteSDK.IdDataResponse?
  public var extractedPersonalData: IDentityLiteSDK.PersonalCustomerValidateIdResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerVerifyRequest : Swift.Encodable {
  public var securityData: IDentityLiteSDK.SecurityData
  public var customerData: IDentityLiteSDK.CustomerVerifyDataRequest
  public var additionalData: IDentityLiteSDK.AdditionalCustomerCommonData
  public init(securityData: IDentityLiteSDK.SecurityData, customerData: IDentityLiteSDK.CustomerVerifyDataRequest, additionalData: IDentityLiteSDK.AdditionalCustomerCommonData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerVerifyResponse : Swift.Codable {
  public var status: IDentityLiteSDK.StatusData?
  public var resultData: IDentityLiteSDK.FormDetailVerifyResponseData?
  public var responseCustomerVerifyData: IDentityLiteSDK.CustomerVerifyDataResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct EmployeeData : Swift.Encodable {
  public var companyId: Swift.String?
  public init(companyId: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerEnrollDataRequest : Swift.Encodable {
  public var idData: IDentityLiteSDK.IdDataRequest
  public var personalData: IDentityLiteSDK.PersonalCustomerCommonRequestData
  public var biometericData: IDentityLiteSDK.BiometricEnrollData
  public init(idData: IDentityLiteSDK.IdDataRequest, personalData: IDentityLiteSDK.PersonalCustomerCommonRequestData, biometricData: IDentityLiteSDK.BiometricEnrollData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct QKMRZResult {
  public let documentType: Swift.String
  public let countryCode: Swift.String
  public let surnames: Swift.String
  public let givenNames: Swift.String
  public let documentNumber: Swift.String
  public let nationalityCountryCode: Swift.String
  public let birthdate: Foundation.Date?
  public let sex: Swift.String?
  public let expiryDate: Foundation.Date?
  public let personalNumber: Swift.String
  public let personalNumber2: Swift.String?
  public let isDocumentNumberValid: Swift.Bool
  public let isBirthdateValid: Swift.Bool
  public let isExpiryDateValid: Swift.Bool
  public let isPersonalNumberValid: Swift.Bool?
  public let allCheckDigitsValid: Swift.Bool
}
public struct BiometricEnrollData : Swift.Encodable {
  public var selfie: Swift.String
  public var fingerPrintData: IDentityLiteSDK.FingerPrintData?
  public var voiceData: Swift.String?
  public init(selfie: Swift.String, fingerPrintData: IDentityLiteSDK.FingerPrintData? = nil, voiceData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SecurityData : Swift.Encodable {
  public var userName: Swift.String
  public var password: Swift.String
  public var merchantId: Swift.Int
  public init(userName: Swift.String, password: Swift.String, merchantId: Swift.Int)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdResponse : Swift.Codable {
  public var status: IDentityLiteSDK.StatusData?
  public var resultData: IDentityLiteSDK.FormDetailValidateIdResponseData?
  public var responseCustomerData: IDentityLiteSDK.CustomerDataValidateIdResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerIdentifyRequest : Swift.Encodable {
  public var securityData: IDentityLiteSDK.SecurityData
  public var biometericData: IDentityLiteSDK.BiometricIdentifyData
  public var additionalData: IDentityLiteSDK.AdditionalCustomerCommonData
  public init(securityData: IDentityLiteSDK.SecurityData, biometricData: IDentityLiteSDK.BiometricIdentifyData, additionalData: IDentityLiteSDK.AdditionalCustomerCommonData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct AdditionalCustomerLiveCheckResponseData : Swift.Codable {
  public var liveFaceDetectionFlag: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonalCustomerValidateIdFaceMatchResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var address: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var addressLine3: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var lastName2: Swift.String?
  public var firstName: Swift.String?
  public var middleName: Swift.String?
  public var lastName: Swift.String?
  public var firstNameNonEng: Swift.String?
  public var lastNameNonEng: Swift.String?
  public var middleNameNonEng: Swift.String?
  public var addressNonEng: Swift.String?
  public var addressLine1NonEng: Swift.String?
  public var addressLine2NonEng: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FormDetailLiveCheckResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FormDetailIdentifyResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerLiveCheckResponse : Swift.Codable {
  public var status: IDentityLiteSDK.StatusData?
  public var resultData: IDentityLiteSDK.FormDetailLiveCheckResponseData?
  public var additionalData: IDentityLiteSDK.AdditionalCustomerLiveCheckResponseData?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IdDataRequest : Swift.Encodable {
  public enum IdType : Swift.String, Swift.Encodable {
    case passport
    case driversLicense
    case photoId
    case nationalId
    case governmentMilitaryOrPoliceId
    case residenceCard
    case voterIdCard
    case workVisaOrPemit
    case unitedNationsRefugeeCard
    case other
    case notSpecified
    case taxIdCard
    case studentVisaPermit
    case boatShipIdCard
    case globalEntryCard
    case passportCard
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var idType: IDentityLiteSDK.IdDataRequest.IdType
  public var idCountry: Swift.String
  public var idState: Swift.String?
  public var idImageFront: Swift.String
  public var idImageBack: Swift.String?
  public init(idType: IDentityLiteSDK.IdDataRequest.IdType, idCountry: Swift.String, idState: Swift.String? = nil, idImageFront: Swift.String, idImageBack: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerLiveCheckDataRequest : Swift.Encodable {
  public var biometericData: IDentityLiteSDK.BiometricLiveCheckData
  public init(biometericData: IDentityLiteSDK.BiometricLiveCheckData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct RealnessScores {
  public let photocopyScore: Swift.Float
  public let realScore: Swift.Float
  public let screenScore: Swift.Float
}
public struct DeDuplicationResponseData : Swift.Codable {
  public var faceMatchingScore: Swift.String?
  public var duplicatePersonId: Swift.Int?
  public var clientCustomerNumber: Swift.String?
  public var customerCode: Swift.String?
  public var faceImage: Swift.String?
  public var customerName: Swift.String?
  public var recordType: Swift.String?
  public var fingerPrintData: Swift.String?
  public var fpMatchingScore: Swift.String?
  public var isDuplicate: Swift.String?
  public var duplicationStatus: Swift.String?
  public var enrolledDate: Swift.String?
  public var duplicateVoiceMatchScore: Swift.String?
  public var duplicateFrontImage: Swift.String?
  public var duplicateBackImage: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct BiometricIdentifyData : Swift.Encodable {
  public var selfie: Swift.String
  public var fingerPrintData: IDentityLiteSDK.FingerPrintData?
  public var voiceData: Swift.String?
  public init(selfie: Swift.String, fingerPrintData: IDentityLiteSDK.FingerPrintData? = nil, voiceData: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdRequest : Swift.Encodable {
  public var securityData: IDentityLiteSDK.SecurityData
  public var customerData: IDentityLiteSDK.CustomerValidateIdDataRequest
  public var additionalData: IDentityLiteSDK.AdditionalCustomerWFlagCommonData
  public init(securityData: IDentityLiteSDK.SecurityData, customerData: IDentityLiteSDK.CustomerValidateIdDataRequest, additionalData: IDentityLiteSDK.AdditionalCustomerWFlagCommonData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct MRZResult : Swift.Encodable {
  public var dictionary: [Swift.String : Swift.String] {
    get
  }
  public var birthDateString: Swift.String? {
    get
  }
  public var expiryDateString: Swift.String? {
    get
  }
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FingerPrintMetadata : Swift.Encodable {
  public enum Format : Swift.String, Swift.Encodable {
    case jpeg
    case wsq
    case iso
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var format: IDentityLiteSDK.FingerPrintMetadata.Format
  public var model: Swift.String?
  public var serialNumber: Swift.String?
  public var backgroundColor: Swift.String?
  public init(format: IDentityLiteSDK.FingerPrintMetadata.Format, model: Swift.String? = nil, serialNumber: Swift.String? = nil, backgroundColor: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
@objc @_inheritsConvenienceInitializers public class IDError : Foundation.NSError {
  convenience public init(_ localizedDescription: Swift.String)
  @objc override dynamic public init(domain: Swift.String, code: Swift.Int, userInfo dict: [Swift.String : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public struct PersonalCustomerValidateIdResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var address: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var addressLine3: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var lastName2: Swift.String?
  public var firstName: Swift.String?
  public var middleName: Swift.String?
  public var lastName: Swift.String?
  public var firstNameNonEng: Swift.String?
  public var lastNameNonEng: Swift.String?
  public var middleNameNonEng: Swift.String?
  public var addressNonEng: Swift.String?
  public var addressLine1NonEng: Swift.String?
  public var addressLine2NonEng: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CustomerEnrollResponse : Swift.Codable {
  public var status: IDentityLiteSDK.StatusData?
  public var resultData: IDentityLiteSDK.FormDetailCommonResponseData?
  public var deDuplicationData: [IDentityLiteSDK.DeDuplicationResponseData]?
  public var responseCustomerData: IDentityLiteSDK.CustomerEnrollDataResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct FingerPrintData : Swift.Encodable {
  public var fingerPrints: [IDentityLiteSDK.FingerPrint]
  public var metadata: IDentityLiteSDK.FingerPrintMetadata
  public init(fingerPrints: [IDentityLiteSDK.FingerPrint], metadata: IDentityLiteSDK.FingerPrintMetadata)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerValidateIdFaceMatchResponse : Swift.Codable {
  public var status: IDentityLiteSDK.StatusData?
  public var resultData: IDentityLiteSDK.FormDetailCommonResponseData?
  public var responseCustomerData: IDentityLiteSDK.CustomerValidateIdFaceMatchDataResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct State : Swift.Codable {
  public var stateCode: Swift.String
  public var countryCode: Swift.String
  public var stateName: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct StateList {
  public static var states: [IDentityLiteSDK.State] {
    get
  }
}
public struct PersonalCustomerEnrollResponseData : Swift.Codable {
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: Swift.String?
  public var address: Swift.String?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var addressLine3: Swift.String?
  public var city: Swift.String?
  public var country: Swift.String?
  public var lastName2: Swift.String?
  public var firstName: Swift.String?
  public var middleName: Swift.String?
  public var lastName: Swift.String?
  public var firstNameNonEng: Swift.String?
  public var lastNameNonEng: Swift.String?
  public var middleNameNonEng: Swift.String?
  public var addressNonEng: Swift.String?
  public var addressLine1NonEng: Swift.String?
  public var addressLine2NonEng: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct AdditionalCustomerLiveCheckData : Swift.Encodable {
  public var uniqueRequestId: Swift.String
  public var metadata: IDentityLiteSDK.Metadata?
  public var ocrMetadata: IDentityLiteSDK.OcrMetadata?
  public init(uniqueRequestId: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PersonalCustomerCommonRequestData1 : Swift.Encodable {
  public enum Gender : Swift.String, Swift.Encodable {
    case female
    case male
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public var uniqueNumber: Swift.String?
  public var name: Swift.String?
  public var phone: Swift.String?
  public var email: Swift.String?
  public var dob: Swift.String?
  public var gender: IDentityLiteSDK.PersonalCustomerCommonRequestData1.Gender?
  public var addressLine1: Swift.String?
  public var addressLine2: Swift.String?
  public var city: Swift.String?
  public var district: Swift.String?
  public var country: Swift.String?
  public init(uniqueNumber: Swift.String? = nil, name: Swift.String? = nil, phone: Swift.String? = nil, email: Swift.String? = nil, dob: Swift.String? = nil, gender: IDentityLiteSDK.PersonalCustomerCommonRequestData1.Gender? = nil, addressLine1: Swift.String? = nil, addressLine2: Swift.String? = nil, city: Swift.String? = nil, district: Swift.String? = nil, country: Swift.String? = nil)
  public func encode(to encoder: Swift.Encoder) throws
}
extension CoreGraphics.CGRect {
  public func rotatedCCW(in size: CoreGraphics.CGSize) -> CoreGraphics.CGRect
  public func aspectFill(from size1: CoreGraphics.CGSize, to size2: CoreGraphics.CGSize) -> CoreGraphics.CGRect
  public func expand(by factor: CoreGraphics.CGFloat) -> CoreGraphics.CGRect
}
extension IDentityLiteSDK.IDentitySDK {
  public static var templateModelBaseURL: Swift.String {
    get
    set
  }
  public static var apiBaseURL: Swift.String {
    get
    set
  }
}
public class QKMRZParser {
  public init(ocrCorrection: Swift.Bool = false)
  public func parse(mrzLines: [Swift.String]) -> IDentityLiteSDK.QKMRZResult?
  public func parse(mrzString: Swift.String) -> IDentityLiteSDK.QKMRZResult?
  @objc deinit
}
extension QuartzCore.CALayer {
  public func draw(rect: CoreGraphics.CGRect, color: UIKit.UIColor)
  public func removeShapeSublayers()
}
public struct BiometricValidateIdFaceMatchData : Swift.Encodable {
  public var selfie: Swift.String
  public init(selfie: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct IdDataResponse : Swift.Codable {
  public var idType: Swift.String?
  public var idState: Swift.String?
  public var idCountry: Swift.String?
  public var idNumber: Swift.String?
  public var idNumber1: Swift.String?
  public var idNumber2: Swift.String?
  public var idNumber3: Swift.String?
  public var idDateOfBirth: Swift.String?
  public var idDateOfBirthFormatted: Swift.String?
  public var idExpirationDate: Swift.String?
  public var idExpirationDateFormatted: Swift.String?
  public var idIssueDate: Swift.String?
  public var idIssueCountry: Swift.String?
  public var mrzData: Swift.String?
  public var idImageFront: Swift.String?
  public var idImageBack: Swift.String?
  public var idProcessImageFront: Swift.String?
  public var idProcessImageBack: Swift.String?
  public var idNumberNonEng: Swift.String?
  public var idNumber2NonEng: Swift.String?
  public var idDateOfBirthNonEng: Swift.String?
  public var idExpirationDateNonEng: Swift.String?
  public var idIssueDateNonEng: Swift.String?
  public var barcodeDataParsed: Swift.String?
  public var photoOnId: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct PersonalCustomerVerifyData : Swift.Encodable {
  public var uniqueNumber: Swift.String
  public init(uniqueNumber: Swift.String)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct FormDetailCommonResponseData : Swift.Codable {
  public var uniqueRequestId: Swift.String?
  public var verificationResultId: Swift.Int?
  public var verificationResult: Swift.String?
  public var verificationResultCode: Swift.String?
  public var faceVerificationResult: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDType : Swift.Codable {
  public var idTypeCode: Swift.String
  public var idTypeDesc: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct IDList {
  public static var idTypes: [IDentityLiteSDK.IDType] {
    get
  }
}
public protocol SelfieCaptureDelegate : AnyObject {
  func updated(state: IDentityLiteSDK.SelfieCaptureState)
}
public enum SelfieCaptureState {
  case detectingFace
  case moveCloser
  case moveAway
  case alignFace
  case detectedIssue(Swift.String)
  case capturingFace
  case success(IDentityLiteSDK.Selfie)
  case timedOut(IDentityLiteSDK.Selfie)
  case failed(IDentityLiteSDK.Selfie?, Swift.Float?)
}
public struct Selfie {
  public let image: UIKit.UIImage
  public let faceImage: UIKit.UIImage
  public let averageLiveness: Swift.Float
  public let faceLocation: CoreGraphics.CGRect
}
public class SelfieCapture {
  public static var minFaceWidth: Swift.Float
  public static var eyeOpenProbability: Swift.Float
  public static var minHeadEulerAngle: Swift.Float
  public static var maxHeadEulerAngle: Swift.Float
  public static var minRelativeNoseHeight: Swift.Float
  public static var maxRelativeNoseHeight: Swift.Float
  public static var labelsConfidenceThreshold: Swift.Float
  public static var faceMaskProbabilityThreshold: Swift.Float
  public static var liveFaceProbabilityThreshold: Swift.Float
  public static var consecutiveFakeFaceLimit: Swift.Int
  public static var lightIntensityThreshold: Swift.Float
  public static var isDebugMode: Swift.Bool
  public static var capture4K: Swift.Bool
  weak public var delegate: IDentityLiteSDK.SelfieCaptureDelegate?
  public init(overlayFrame: CoreGraphics.CGRect)
  public func retry()
  @objc deinit
}
extension IDentityLiteSDK.SelfieCapture : IDentityLiteSDK.CaptureSessionDelegate {
  public func captured(image: UIKit.UIImage, captureMode: IDentityLiteSDK.CaptureMode, lensPosition: Swift.Float)
}
extension Foundation.NSNotification.Name {
  public static let selfieCaptureDebugData: Foundation.Notification.Name
}
public struct CustomerValidateIdFaceMatchRequest : Swift.Encodable {
  public var securityData: IDentityLiteSDK.SecurityData
  public var customerData: IDentityLiteSDK.CustomerValidateIdFaceMatchDataRequest
  public var additionalData: IDentityLiteSDK.AdditionalCustomerWFlagCommonData
  public init(securityData: IDentityLiteSDK.SecurityData, customerData: IDentityLiteSDK.CustomerValidateIdFaceMatchDataRequest, additionalData: IDentityLiteSDK.AdditionalCustomerWFlagCommonData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerIdentifyResponse : Swift.Codable {
  public var status: IDentityLiteSDK.StatusData?
  public var resultData: IDentityLiteSDK.FormDetailIdentifyResponseData?
  public var responseCustomerData: IDentityLiteSDK.CustomerIdentifyDataResponse?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct OcrMetadata : Swift.Encodable {
  public var idData: [Swift.String : Swift.String]
  public init(idData: [Swift.String : Swift.String])
  public func encode(to encoder: Swift.Encoder) throws
}
public struct CustomerLiveCheckRequest : Swift.Encodable {
  public var securityData: IDentityLiteSDK.SecurityData
  public var customerData: IDentityLiteSDK.CustomerLiveCheckDataRequest
  public var additionalData: IDentityLiteSDK.AdditionalCustomerLiveCheckData
  public init(securityData: IDentityLiteSDK.SecurityData, customerData: IDentityLiteSDK.CustomerLiveCheckDataRequest, additionalData: IDentityLiteSDK.AdditionalCustomerLiveCheckData)
  public func encode(to encoder: Swift.Encoder) throws
}
public struct Country : Swift.Codable {
  public var countryCode: Swift.String
  public var countryName: Swift.String
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
public struct CountryList {
  public static var countries: [IDentityLiteSDK.Country] {
    get
  }
}
public enum InitializationState : Swift.String {
  case ok
  case paused
  case downloading
  case downloaded
  case downloadingFromS3
  case downloadedFromS3
  case error
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum InitializationStage : Swift.String {
  case login
  case getXsltData
  case searchCompanyTemplateDetails
  case passiveFaceTrainingModelLabel
  case idCaptureTrainingModelLabel
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol InitializationDelegate : AnyObject {
  func updateInitialization(stage: IDentityLiteSDK.InitializationStage, state: IDentityLiteSDK.InitializationState)
}
public typealias ErrorCompletion = (Swift.Error?) -> Swift.Void
@_hasMissingDesignatedInitializers public class IDentitySDK {
  public struct LoginCredentials {
    public let loginId: Swift.String
    public let password: Swift.String
    public let merchantId: Swift.String
  }
  public static var loginCredentials: IDentityLiteSDK.IDentitySDK.LoginCredentials? {
    get
  }
  weak public static var delegate: IDentityLiteSDK.InitializationDelegate?
  public class func initializeSDK(loginId: Swift.String, password: Swift.String, merchantId: Swift.String, completion: @escaping IDentityLiteSDK.ErrorCompletion)
  @objc deinit
}
extension IDentityLiteSDK.IDentitySDK {
  public static var livenessModelName: Swift.String {
    get
  }
  public static var modelVersions: [Swift.String : Swift.String] {
    get
  }
  public static var version: Swift.String {
    get
  }
}
public struct CustomerEnrollBiometricResponse : Swift.Codable {
  public var status: IDentityLiteSDK.StatusData?
  public var resultData: IDentityLiteSDK.FormDetailEnrollBiometricsResponseData?
  public var deDuplicationData: [IDentityLiteSDK.DeDuplicationResponseData]?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.NeedImmediateResponse : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.NeedImmediateResponse : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.NeedImmediateResponse : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.DeDuplicationRequired : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.DeDuplicationRequired : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerEnrollBiometricRequestData.DeDuplicationRequired : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.ManualReviewRequired : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.ManualReviewRequired : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.ManualReviewRequired : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassAgeValidation : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassAgeValidation : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassAgeValidation : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeDuplicationRequired : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeDuplicationRequired : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeDuplicationRequired : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassNameMatching : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassNameMatching : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.BypassNameMatching : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.PostDataAPIRequired : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.PostDataAPIRequired : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.PostDataAPIRequired : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendInputImagesInPost : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendInputImagesInPost : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendInputImagesInPost : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendProcessedImagesInPost : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendProcessedImagesInPost : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.SendProcessedImagesInPost : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.NeedImmediateResponse : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.NeedImmediateResponse : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.NeedImmediateResponse : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeduplicationSynchronous : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeduplicationSynchronous : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.DeduplicationSynchronous : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.VerifyDataWithHost : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.VerifyDataWithHost : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.VerifyDataWithHost : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.IdBackImageRequired : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.IdBackImageRequired : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.IdBackImageRequired : Swift.RawRepresentable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.StripSpecialCharacters : Swift.Equatable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.StripSpecialCharacters : Swift.Hashable {}
extension IDentityLiteSDK.AdditionalCustomerWFlagCommonData.StripSpecialCharacters : Swift.RawRepresentable {}
extension IDentityLiteSDK.PersonalCustomerCommonRequestData.Gender : Swift.Equatable {}
extension IDentityLiteSDK.PersonalCustomerCommonRequestData.Gender : Swift.Hashable {}
extension IDentityLiteSDK.PersonalCustomerCommonRequestData.Gender : Swift.RawRepresentable {}
extension IDentityLiteSDK.DetectedData.DocumentSide : Swift.Equatable {}
extension IDentityLiteSDK.DetectedData.DocumentSide : Swift.Hashable {}
extension IDentityLiteSDK.CameraPosition : Swift.Equatable {}
extension IDentityLiteSDK.CameraPosition : Swift.Hashable {}
extension IDentityLiteSDK.FingerPrint.Position : Swift.Equatable {}
extension IDentityLiteSDK.FingerPrint.Position : Swift.Hashable {}
extension IDentityLiteSDK.FingerPrint.Position : Swift.RawRepresentable {}
extension IDentityLiteSDK.CaptureMode : Swift.Equatable {}
extension IDentityLiteSDK.CaptureMode : Swift.Hashable {}
extension IDentityLiteSDK.IdDataRequest.IdType : Swift.Equatable {}
extension IDentityLiteSDK.IdDataRequest.IdType : Swift.Hashable {}
extension IDentityLiteSDK.IdDataRequest.IdType : Swift.RawRepresentable {}
extension IDentityLiteSDK.FingerPrintMetadata.Format : Swift.Equatable {}
extension IDentityLiteSDK.FingerPrintMetadata.Format : Swift.Hashable {}
extension IDentityLiteSDK.FingerPrintMetadata.Format : Swift.RawRepresentable {}
extension IDentityLiteSDK.PersonalCustomerCommonRequestData1.Gender : Swift.Equatable {}
extension IDentityLiteSDK.PersonalCustomerCommonRequestData1.Gender : Swift.Hashable {}
extension IDentityLiteSDK.PersonalCustomerCommonRequestData1.Gender : Swift.RawRepresentable {}
extension IDentityLiteSDK.InitializationState : Swift.Equatable {}
extension IDentityLiteSDK.InitializationState : Swift.Hashable {}
extension IDentityLiteSDK.InitializationState : Swift.RawRepresentable {}
extension IDentityLiteSDK.InitializationStage : Swift.Equatable {}
extension IDentityLiteSDK.InitializationStage : Swift.Hashable {}
extension IDentityLiteSDK.InitializationStage : Swift.RawRepresentable {}
